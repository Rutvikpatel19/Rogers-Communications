/**
 * This TypeScript file contains a series of networking commands used to diagnose 
 * and configure various aspects of PON (Passive Optical Network) and other network devices.
 * The explanations are provided for each command for clarity and understanding.
 */

class NetworkDiagnostics {

    /**
     * Shows the current PON interface traffic control-layer interval.
     * Useful for troubleshooting and monitoring network traffic flow.
     */
    showPonInterfaceTcLayerCurrentInterval() {
        console.log("show pon interface tc-layer current-interval 1/1/12/1");
        // Explanation: Displays the current interval of traffic control layer for the specified PON interface.
    }

    /**
     * Displays the previous PON interface traffic control-layer interval.
     * Helps in understanding traffic behavior over different time intervals.
     */
    showPonInterfaceTcLayerPreviousInterval() {
        console.log("show pon interface tc-layer previous-interval 1/1/12/1");
        // Explanation: This command shows the previous traffic control-layer interval for the specified interface.
    }

    /**
     * Retrieves the Small Form-factor Pluggable (SFP) inventory for the specified PON interface.
     * This is used to check the physical transceivers connected to the network.
     */
    showPonSfpInventory() {
        console.log("show pon sfp-inventory 1/1/12/1");
        // Explanation: Displays the SFP inventory details for the specified PON interface.
    }

    /**
     * Shows the optical performance metrics for the given PON interface.
     * Optical parameters like signal strength, power levels, etc., are crucial for troubleshooting.
     */
    showPonOptics() {
        console.log("show pon optics 1/1/12/1");
        // Explanation: Displays the optical performance of the specified PON interface.
    }

    /**
     * Displays PON diagnostics for the given interface.
     * Helps identify any issues related to the physical layer of the PON.
     */
    showPonPonDiagnostics() {
        console.log("show pon pon-diagnostics 1/1/12/1");
        // Explanation: This command retrieves the diagnostics for a specified PON interface, helpful for troubleshooting.
    }

    /**
     * Shows the inventory of transceivers in the network equipment.
     * Used to verify if all the required transceivers are present and operational.
     */
    showEquipmentTransceiverInventory() {
        console.log("show equipment transceiver-inventory");
        // Explanation: This command shows a list of all installed transceivers across network equipment.
    }

    /**
     * Retrieves detailed transceiver information for the specified slot and SFP.
     * Useful for checking the status and type of SFPs installed.
     */
    showEquipmentTransceiverInventoryDetail() {
        console.log("show equipment transceiver-inventory lt:1/1/3:sfp:5 detail");
        // Explanation: This command shows the detailed information about the SFP installed in slot 1/1/3, port 5.
    }

    /**
     * Shows detailed diagnostics of an SFP module.
     * This is helpful for detecting physical issues with the SFP.
     */
    showEquipmentDiagnosticsSfpDetail() {
        console.log("show equipment diagnostics sfp detail");
        // Explanation: Displays diagnostics for the SFPs installed in the system.
    }

    /**
     * Retrieves the diagnostics for a specific SFP in slot 1/1/12, port 1.
     * Useful for troubleshooting SFP module-related issues in specific ports.
     */
    showEquipmentDiagnosticsSfpSlotDetail() {
        console.log("show equipment diagnostics sfp lt:1/1/12:sfp:1 detail");
        // Explanation: Fetches diagnostics for a specific SFP in slot 1/1/12, port 1.
    }

    /**
     * Retrieves the SFP threshold diagnostics for a specific slot and port.
     * This command helps monitor if the SFP is exceeding its operational threshold.
     */
    showEquipmentDiagnosticsSfpThreshold() {
        console.log("show equipment diagnostics sfp-threshold lt:1/1/12:sfp:1 detail");
        // Explanation: Displays the SFP threshold diagnostics, showing if the module exceeds configured thresholds.
    }

    /**
     * Checks the status of a given ONT (Optical Network Terminal) in the PON system.
     * Ensures that the ONT is operational and in the expected state.
     */
    showEquipmentOntStatusXpon() {
        console.log("show equipment ont status x-pon | match exact:1/1/1/4/");
        // Explanation: Checks the status of an ONT in the PON system and filters results to match the exact port.
    }

    /**
     * Displays the temperature of the equipment.
     * Useful for checking if the device is running at a safe operating temperature.
     */
    showEquipmentTemperature() {
        console.log("show equipment temperature");
        // Explanation: Displays the current temperature of network devices, important for monitoring hardware health.
    }

    /**
     * Displays configuration information for a specific network context.
     * Useful when troubleshooting specific configurations or interfaces.
     */
    displayConfigForContext() {
        console.log("A:agw07.mtwd# admin display-config | match VGHNON65OLT context all ignore-case");
        // Explanation: Fetches configuration information for the "VGHNON65OLT" context, ignoring case.
    }

    /**
     * Shows detailed diagnostics for a specific SFP in a different slot.
     * Helps in identifying issues specific to different network cards or ports.
     */
    showEquipmentDiagnosticsSfpOtherSlot() {
        console.log("show equipment diagnostics sfp lt:1/1/3:xfp:5 detail");
        // Explanation: Fetches diagnostic data for an XFP module in slot 1/1/3, port 5.
    }

    /**
     * Shows the description of all ports associated with a specific AGW (Aggregation Gateway).
     * Useful for identifying what services or devices are connected to each port.
     */
    showPortDescription() {
        console.log("show port description | match agw");
        // Explanation: Displays descriptions of ports related to the Aggregation Gateway, useful for identifying service connections.
    }

    /**
     * Retrieves the active subscribers' hierarchy for a specific service.
     * This helps in monitoring active sessions for a given service or subscriber.
     */
    showActiveSubscribersHierarchy() {
        console.log("show service active-subscribers hierarchy | match ALCLF9D58E33 context all ignore-case");
        // Explanation: Retrieves information about active subscribers for the given service context.
    }

    /**
     * Displays the status of a session tied to a specific IP address or MAC.
     * Typically used in troubleshooting IPoE sessions in broadband networks.
     */
    showIpSessionStatus() {
        console.log("show service active-subscribers hierarchy | match ALCLCBDDFD20 context all ignore-case");
        // Explanation: Fetches session data for a subscriber linked to the ALCLCBDDFD20 service profile.
    }

    /**
     * Shows the uptime of the core network device.
     * This command is useful to assess the stability and operational period of the core network equipment.
     */
    showCoreUptime() {
        console.log("OKVMON91OLT:owen.yuen]#show core1-uptime");
        // Explanation: Displays the uptime information for the core device "core1".
    }

    /**
     * Performs a ping test to verify connectivity.
     * Ensures that the IP address is reachable and helps identify network connectivity issues.
     */
    ping() {
        console.log("ping 173.35.202.74");
        // Explanation: Pings the IP address to check connectivity.
    }

    /**
     * Clears an active session for a specific subscriber.
     * Used to reset or terminate a session for troubleshooting or service management.
     */
    clearIpoeSession() {
        console.log("clear service id 124 ipoe session sap lag-43:2318.1103");
        // Explanation: Clears the specific IPoE session for the given service and SAP (Service Access Point).
    }

    /**
     * Displays any errors associated with the subscriber management system.
     * Useful for diagnosing issues with subscriber connections or session management.
     */
    showSubscriberManagementErrors() {
        console.log("show subscriber-mgmt errors sap lag-55:2307.1101");
        // Explanation: Shows errors related to subscriber management, which is essential for service troubleshooting.
    }
}

// Instantiate the NetworkDiagnostics class
const networkDiag = new NetworkDiagnostics();

// Execute various diagnostic commands (commented for demonstration purposes)
networkDiag.showPonInterfaceTcLayerCurrentInterval();
networkDiag.showPonSfpInventory();
networkDiag.showEquipmentTemperature();
networkDiag.ping();
networkDiag.showSubscriberManagementErrors();

